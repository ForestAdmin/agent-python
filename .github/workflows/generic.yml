name: Reusable package workflow

on:
  workflow_call:
    inputs:
      packages:
        required: true
        type: string
    secrets:
      CC_TEST_REPORTER_ID:
        required: true
      PYPI_TOKEN:
        required: true
      GH_TOKEN:
        required: true
      GIT_AUTHOR_EMAIL:
        required: true
      GIT_AUTHOR_NAME:
        required: true
      GIT_COMMITTER_EMAIL:
        required: true
      GIT_COMMITTER_NAME:
        required: true
      SLACK_WEBHOOK:
        required: true
jobs:
  changes:
    name: changes
    runs-on: ubuntu-latest
    outputs:
      # packages: ${{ steps.changes.outputs.packages }}
      django_agent: ${{ steps.changes.outputs.django_agent }}
      flask_agent: ${{ steps.changes.outputs.flask_agent }}
      agent_toolkit: ${{ steps.changes.outputs.agent_toolkit }}
      datasource_django: ${{ steps.changes.outputs.datasource_django }}
      datasource_sqlalchemy: ${{ steps.changes.outputs.datasource_sqlalchemy }}
      datasource_toolkit: ${{ steps.changes.outputs.datasource_toolkit }}

    steps:
      - uses: actions/checkout@v4
      - id: changes
        uses: ./.github/actions/changes

  lint:
    name: Linting
    needs: [ changes ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
        current_package: ${{ fromJson(inputs.packages) }}
    steps:
      - uses: actions/checkout@v4
      - id: has_change
        run: |
          PACKAGE_NAME=$(echo $PACKAGE | cut -d'/' -f3)
          echo "has_change=$(echo $CHANGES | jq .$PACKAGE_NAME)" >> $GITHUB_OUTPUT
        shell: bash
        env:
          PACKAGE: ${{ matrix.current_package }}
          CHANGES: ${{ toJSON(needs.changes.outputs) }}

      - run:   echo "$OUTPUTS"
        shell: bash
        env:
          OUTPUTS: ${{ steps.has_change.outputs.has_change }}

      - id: lint
        if: ${{ steps.has_change.outputs.has_change == "true" }}
        uses: ./.github/actions/linting
        with:
          python-version: ${{ matrix.python-version }}
          current_package: ${{ matrix.current_package }}
  isort:
    name: Isorting
    needs: [ changes ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
        current_package: ${{ fromJson(inputs.packages) }}
    steps:
      - uses: actions/checkout@v4
      - id: isort
        if: needs.changes.outputs.${{ matrix.current_package }} == 'true'
        uses: ./.github/actions/isort
        with:
          python-version: ${{ matrix.python-version }}
          current_package: ${{ matrix.current_package }}
  black:
    name: Black
    needs: [ changes ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
        current_package: ${{ fromJson(inputs.packages) }}
    steps:
      - uses: actions/checkout@v4
      - id: isort
        if: needs.changes.outputs.${{ matrix.current_package }} == 'true'
        uses: ./.github/actions/black
        with:
          python-version: ${{ matrix.python-version }}
          current_package: ${{ matrix.current_package }}
  test:
    name: Test
    needs: [isort, lint, black]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        current_package: ${{ fromJson(inputs.packages) }}
    steps:
      - uses: actions/checkout@v4
      - id: tests
        if: steps.changes.outputs.${{ matrix.current_package }} == 'true'
        uses: ./.github/actions/tests
        with:
          python-version: ${{ matrix.python-version }}
          current_package: ${{ matrix.current_package }}
  coverage:
    name: Coverage
    needs: [test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v4
      - id: coverage
        uses: ./.github/actions/coverage
        with:
          python-version: ${{ matrix.python-version }}
          current_package: ./src/datasource_toolkit
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}

  semantic_release:
    name: Semantic release
    needs: [coverage]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta')
    outputs:
      new_release_published: ${{ steps.release.outputs.new_release_published }}
      new_release_version: ${{ steps.release.outputs.new_release_version }}
    strategy:
      matrix:
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false # GITHUB_TOKEN must not be set for the semantic release
      - id: release
        uses: ./.github/actions/release
        with:
          packages: ${{ inputs.packages }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GIT_AUTHOR_EMAIL: ${{ secrets.GIT_AUTHOR_EMAIL }}
          GIT_AUTHOR_NAME: ${{ secrets.GIT_AUTHOR_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.GIT_COMMITTER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.GIT_COMMITTER_NAME }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}


  pypi:
    name: Push to pypi
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta') && needs.semantic_release.outputs.new_release_published == 'true'
    needs: [semantic_release]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 6
      matrix:
        python-version: ['3.10']
        current_package: ${{ fromJson(inputs.packages) }}
    steps:
      - uses: actions/checkout@v4
      - id: pypi
        uses: ./.github/actions/pypi
        with:
          current_package: ${{ matrix.current_package }}
          python-version: ${{ matrix.python-version }}
          pypi_token: ${{ secrets.PYPI_TOKEN }}
