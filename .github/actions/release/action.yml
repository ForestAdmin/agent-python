name: "Releasing"
description: ""
inputs:
  packages:
    required: true
    description: "The package to release"
  GITHUB_TOKEN:
    required: true
  GIT_AUTHOR_EMAIL:
    required: true
  GIT_AUTHOR_NAME:
    required: true
  GIT_COMMITTER_EMAIL:
    required: true
  GIT_COMMITTER_NAME:
    required: true
  SLACK_WEBHOOK:
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-node@v2
      with:
        node-version: 14.17.6
    # - uses: actions/cache@v2
    #   with:
    #     path: '**/node_modules'
    #     key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
    - name: install dependencies
      run: yarn install --non-interactive
      # run: yarn install --frozen-lockfile --non-interactive --production=false
    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v2
      id: semantic
      with:
        semantic_version: 17.3.0
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        GIT_AUTHOR_EMAIL: ${{ inputs.GIT_AUTHOR_EMAIL }}
        GIT_AUTHOR_NAME: ${{ inputs.GIT_AUTHOR_NAME }}
        GIT_COMMITTER_EMAIL: ${{ inputs.GIT_COMMITTER_EMAIL }}
        GIT_COMMITTER_NAME: ${{ inputs.GIT_COMMITTER_NAME }}
        SLACK_WEBHOOK: ${{ inputs.SLACK_WEBHOOK }}
        # PYPI_TOKEN: ${{ inputs.PYPI_TOKEN }}

    # - name: build versions
    #   id: build_versions
    #   shell: bash
    #   run: |
    #     echo $(newArray=( $(echo ${{ inputs.packages }} | sed -e 's/\[//g' -e 's/\]//g' -e 's/\,/ /g' -e 's/"//g') ); res=""; for value in "${newArray[@]}"; do res+="../.${value}pyproject.toml:tool.poetry.version,"; done; res=${res: : -1}; echo "VERSIONS=$res") >> $GITHUB_OUTPUT
    # - name: Semantic Release
    #   shell: bash
    #   working-directory:  ${{ inputs.packages }}
    #   run: |
    #     pip install python-semantic-release<=8
    #     git config user.name github-actions
    #     git config user.email github-actions@github.com
    #     semantic-release publish --prerelease -D changelog_file="../../CHANGELOG.md" -D version_toml=${{ steps.build_versions.outputs.VERSIONS }}
