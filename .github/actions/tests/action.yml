name: "Tests"
description: ""
inputs:
  python-version:
    required: true
    description: "The python-version used to define the python uses"
  current_package:
    required: true
    description: "The package to test"
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
    - name: Install poetry
      shell: bash
      run: |
        pipx install poetry
        echo "POETRY_CACHE_DIR=$(pip cache dir)" >> $GITHUB_ENV
    - name: Set up Python ${{ inputs.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}
        cache: 'poetry'
        #Â setup python cache is 10 Mb and name is:
        # 'setup-python-Linux-python-3.10.15-poetry-v2-d2a04beabaad3b04df0afa80a06ba826d4dbba62915af5dd06c85580428cd810'
        # setup-python-os-py_version-package_manager_v2_poetry_lock_hash

    - name: Cache poetry
      uses: actions/cache@v3
      with:
        path: ${{ env.POETRY_CACHE_DIR }}
        key: ${{ runner.os }}-poetry-${{ inputs.python-version }}-${{ inputs.current_package }}-${{ hashFiles('**/poetry.lock') }}

    # 315MB of cache * 6 sub package * 5 python versions ~= 10GB.
    # - name: Cache poetry
    #   id: cache-poetry-install
    #   uses: actions/cache@v4
    #   with:
    #     path: '~/.cache/pypoetry'
    #     key: ${{ runner.os }}-poetry-${{ inputs.python-version }}-${{ inputs.current_package }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install package dependencies
      shell: bash
      working-directory: ${{ inputs.current_package }}
      run: poetry install --no-interaction --with test
      # if: steps.cache-poetry-install.outputs.cache-hit != 'true'
    - name: Test with pytest
      shell: bash
      working-directory: ${{ inputs.current_package }}
      run: poetry run coverage run -m pytest
    - name: Extract source name
      uses: jungwinter/split@v2
      id: split
      with:
        msg: ${{ inputs.current_package }}
        separator: '/'
    - name: Archive code coverage results
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report.${{ steps.split.outputs._2 }}.${{ inputs.python-version }}
        path: '${{ inputs.current_package }}.coverage'
        include-hidden-files: 'true'